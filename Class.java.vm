#parse('common.vm')
#set( $ClassName = ${class.getIRI().getFragment()})
#set( $Package = ${PackageBase}.${ontology.getOntologyID().getOntologyIRI().get().getFragment().toLowerCase()} )
$license()
package $Package;

import java.util.ArrayList;
import java.util.List;

import org.universAAL.middleware.rdf.Resource;
import org.universAAL.middleware.owl.ManagedIndividual;
## TODO add Imports
import $Package *;

/**
 * ## TODO add comment (in english) from rdfs:label and rdfs:comment
 */
 ## TODO resolve super class
public class $ClassName extends ManagedIndividual {

	public static final String MY_URI = $NAMESPACE + "$!{ClassName}";
## TODO iterate over Props

#foreach( $prop in ontology.getAxioms(AxiomType.OBJECT_PROPERTY_DOMAIN))
#if($prop.getDomain().equals(cls))
	public static final String PROP_${prop.getProperty().getNamedProperty().getIRI().getFragment().toUpperCase()} = "${prop.getProperty().getNamedProperty().getIRI().getShortForm()}";
#end
#end
#foreach( $prop in ontology.getAxioms(AxiomType.DATA_PROPERTY_DOMAIN))
#if($prop.getDomain().equals(cls))
	public static final String PROP_${prop.getProperty().getNamedProperty().getIRI().getFragment().toUpperCase()} = "${prop.getProperty().getNamedProperty().getIRI().getShortForm()}";
#end
#end
	public ${ClassName}() {
		super();
	}

	public ${ClassName}(String uri) {
		super(uri);
	}

	public String getClassURI() {
		return MY_URI;
	}

	/**
	 *  This method is used for serialization purposes, to restrict the amount of
	 *  information to serialize when forwarding it among nodes.
	 *  For each property you must return one of {@link Resource\#PROP_SERIALIZATION_FULL},
	 *  {@link Resource\#PROP_SERIALIZATION_REDUCED}, {@link Resource\#PROP_SERIALIZATION_OPTIONAL}
	 *  or {@link Resource\#PROP_SERIALIZATION_UNDEFINED}.
	 *  Refer to their javadoc to see what they mean.
	 */
	public int getPropSerializationType(String propURI) {
## TODO iterate over props, checking if propURI is one of the class props
## Else call super
		return PROP_SERIALIZATION_FULL;
	}

	/**
	 * Evaluate if an instance of the concept is properly
	 * built, e.g. if all mandatory fields are present.
	 */
	public boolean isWellFormed() {
## TODO iterate over Manadatory props, check if exsits
		return true;
	}

## TODO Iterate over Property Getters and Setters
#foreach( $prop in ontology.getAxioms(AxiomType.OBJECT_PROPERTY_DOMAIN))
#if($prop.getDomain().equals(cls))
#if($prop.maxCardinality == 1 || $prop.exactCardinality == 1)
## case cardinality 0:1 1:1
	public $prop.range get$propName() {
		return ($prop.range) props.get($propDEF);
	}

	public void setX($prop.range arg) {
		props.put($propDEF, arg);
	}
#else
## case cardinality 0:n 1:n
	public $prop.range[] get$propName() {
		Object propList = props.get($propDEF);
		if (propList instanceof List) {
			return ($prop.range[]) ((List) propList).toArray(new Sensor[0]);
		} else {
			List returnList = new ArrayList();
			if (propList != null)
				returnList.add(($prop.range) propList);
			return ($prop.range[]) returnList.toArray(new $prop.range[0]);
		}
	}

	public void set$propName(Sensor[] arg) {
		List propList = new ArrayList(arg.length);
		for (int i = 0; i < arg.length; i++) {
			propList.add(arg[i]);
		}
		props.put($propDEF, propList);
	}

	public List list$propName() {
		Object propList = props.get($propDEF);
		if (propList instanceof List) {
			return propList;
		} else {
			List returnList = new ArrayList();
			if (propList != null)
				returnList.add(($prop.range) propList);
			return returnList;
		}
	}

	public void add$propName($prop.range arg) {
		Object propList = props.get($propDEF);
		if (propList instanceof List) {
			List list = (List) propList;
			list.add(arg);
			props.put($propDEF, list);
		} else if (propList == null) {
			props.put($propDEF, arg);
		} else {
			List list = new ArrayList();
			list.add(($prop.range) propList);
			list.add(sens);
			props.put($propDEF, list);
		}
	}

	public void remove$propName(Sensor sens) {

	}

#end
#end
#foreach( $prop in ontology.getAxioms(AxiomType.DATA_PROPERTY_DOMAIN))
#if($prop.getDomain().equals(cls))

## subcase 1:1 0:1, boolean (is_)
#end



}
