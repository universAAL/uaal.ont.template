#parse('common.vm')
#license()
package #package($ontology);

import java.util.ArrayList;
import java.util.List;

import org.universAAL.middleware.rdf.Resource;
import org.universAAL.middleware.owl.*;


/**
##Check for class annotations
#set($annotationPerClass = [])
#foreach($ann in ${ontology.getAxioms($AxiomType.ANNOTATION_ASSERTION)})
#if($ann.getSubject().equals($class.getIRI()))
#set($aux = $annotationPerClass.add($ann))
#end
#end
#set( $comments = [])
	#foreach($annotation in $annotationPerClass) {
		#if( ${annotation.getProperty().getIRI()} == "http://www.w3.org/2000/01/rdf-schema#label")
			#set($exec = ${comments.add(0,"${annotation.getValue()}.")})
		#elseif( ${annotation.getProperty().getIRI()} == "http://www.w3.org/2000/01/rdf-schema#comment")
 			#set($exec = ${comments.add("${annotation.getValue()}.")})
		#end
	#end
#foreach( $comment in $comments)
 * $comment
#end
 * #templateStamp()
## TODO: add dot notation for jadoc graph generation
 */
## resolve super class
#macro( resolveSuperClass $class)
#set( $result = [] )
#set( $superClasses = "${reasoner.getReasoner().getSuperClasses($class, true).getNodes()}")
#if (${superClasses.size()} >= 1)
	#foreach( $supercls in $superClasses)
		#if (${ontology.containsClassInSignature($supercls.getIRI())}) 
			#set ( $exec = ${result.add("#className($supercls)")})
		#else
			#foreach ($ont in  ${project.getOntologies2BProcesed()}) 
				#if (${ont.containsClassInSignature($supercls.getIRI())}) 
					#set ( $exec = ${result.add("#package($ont).#className($supercls)")})
				#end
			#end
		#end
	#end
#end
#if ( ${result.isEmpty()} || !$result) 
	#set($result = "ManagedIndividual")
#else
	##XXX: maybe be more intelligent selecting from avilable superclass
	#set($result = ${result.get(0)})
#end
$result##
#end
public class #className($class) extends #resolveSuperClass($class){

	public static final String MY_URI = #resolveURI(${class.getIRI()} $ontology);
## iterate over Props
//OBJECT_PROPERTY_DOMAIN
#foreach( $prop in ${ontology.getAxioms($AxiomType.OBJECT_PROPERTY_DOMAIN)} )
##if($prop.getDomain().equals($class))
#set($prop_var = "#propVar($prop)")
#if(!$prop_var.isEmpty())
public static final String #propVar($prop) = #resolveURI(${prop.getProperty().getNamedProperty().getIRI()} $ontology);
#end
#end
##end
//DATA_PROPERTY_DOMAIN
#foreach( $prop in ${ontology.getAxioms($AxiomType.DATA_PROPERTY_DOMAIN)})
#if($prop.getDomain().equals($class))
#set($state = "#propVar($prop)")
#if(!$state.isEmpty())
public static final String #propVar($prop) = #resolveURI(${prop.getProperty().getNamedProperty().getIRI()} $ontology);
#end
	
#end
#end
	public #className($class)() {
		super();
	}

	public #className($class)(String uri) {
		super(uri);
	}

	public String getClassURI() {
		return MY_URI;
	}

	/**
	 *  This method is used for serialization purposes, to restrict the amount of
	 *  information to serialize when forwarding it among nodes.
	 *  For each property you must return one of {@link Resource\#PROP_SERIALIZATION_FULL},
	 *  {@link Resource\#PROP_SERIALIZATION_REDUCED}, {@link Resource\#PROP_SERIALIZATION_OPTIONAL}
	 *  or {@link Resource\#PROP_SERIALIZATION_UNDEFINED}.
	 *  Refer to their javadoc to see what they mean.
	 */
	public int getPropSerializationType(String propURI) {
## TODO iterate over props, checking if propURI is one of the class props
## Else call super
		return PROP_SERIALIZATION_FULL;
	}

	/**
	 * Evaluate if an instance of the concept is properly
	 * built, e.g. if all mandatory fields are present.
	 */
	public boolean isWellFormed() {
## TODO iterate over Manadatory props, check if exsits
		return true;
	}
## Macros for Properties getters and setters
#macro( propGet $propName $rangeType $propVar)
//prop get
	public $rangeType get$propName() {
		return ($rangeType) props.get($propVar);
	}

	public void setX($rangeType arg) {
		props.put($propVar, arg);
	}
#end
##
#macro( propList $propName $rangeType $propVar)##
//macro prop list -> $propName
public ${rangeType}[] get$propName() {
		Object propList = props.get($propVar);
		if (propList instanceof List) {
			return (${rangeType}[]) ((List) propList).toArray(new ${rangeType}[0]);
		} else {
			List returnList = new ArrayList();
			if (propList != null)
				returnList.add(($rangeType) propList);
			return (${rangeType}[]) returnList.toArray(new ${rangeType}[0]);
		}
	}

	public void set$propName(${rangeType}[] arg) {
		List propList = new ArrayList(arg.length);
		for (int i = 0; i < arg.length; i++) {
			propList.add(arg[i]);
		}
		#if(!$propVar.isEmpty())
			props.put($propVar, propList);
		#end
	
	}

	public List list$propName() {
		Object propList = props.get($propVar);
		if (propList instanceof List) {
			return (List) propList;
		} else {
			List returnList = new ArrayList();
			if (propList != null)
				returnList.add(($rangeType) propList);
			return returnList;
		}
	}

	public void add$propName($rangeType arg) {
		Object propList = props.get($propVar);
		if (propList instanceof List) {
			List list = (List) propList;
			list.add(arg);
			#if(!$propVar.isEmpty())		
			props.put($propVar, list);
			#end
		} else if (propList == null) {
			#if(!$propVar.isEmpty())		
			props.put($propVar, arg);
			#end
		} else {
			List list = new ArrayList();
			list.add(($rangeType) propList);
			list.add(arg);
			#if(!$propVar.isEmpty())		
			props.put($propVar, list);
			#end
		}
	}

	public void remove$propName($rangeType arg) {
		Object propList = props.get($propVar);
		if (propList instanceof List){
			List list = (List) propList;
			list.remove(arg);
			#if(!$propVar.isEmpty())
			if (list.size() == 0)
					props.remove($propVar);
				else if (list.size() == 1)
					props.put($propVar, list.get(0));
				else
					props.put($propVar, list);
			} else if (propList == arg) {
				props.remove($propVar);
			#end		
		}
	}
#end
## Iterate over Property Getters and Setters
#foreach( $prop in ${ontology.getAxioms($AxiomType.OBJECT_PROPERTY_DOMAIN)} )
##if($prop.getDomain().equals($class))##always evaluate false
#set( $propName = "${prop.getProperty().getNamedProperty().getIRI().getFragment()}")
#set( $propName = "#toFirstUpperCase($propName)")
## TODO determine max cardinality (including Exact)
## TODO determine rangeType
#set($rangeType = "ManagedIndividual")
#if($maxCardinality == 1)
## case cardinality 0:1 1:1
#propGet($propName $rangeType "#propVar($prop)")
#else
## case cardinality 0:n 1:n
#propList($propName $rangeType "#propVar($prop)")
##end
#end
#end
#foreach( $prop in ${ontology.getAxioms($AxiomType.DATA_PROPERTY_DOMAIN)})
#if($prop.getDomain().equals($class))
## TODO determine max cardinality
## TODO determine rangeType
##set ($ragneType = "Object")
#if($maxCardinality == 1)
#if($rangeType == "Boolean")
## subcase 1:1 0:1, boolean (is_)
	public boolean is$propName() {
		return (($rangeType) props.get(#propVar($prop))).booleanValue();
	}

	public void setX($rangeType arg) {
		props.put(#propVar($prop), arg);
	}

	public void setX(boolean arg) {
		props.put(#propVar($prop), Boolean.valueOf(arg));
	}
#else##
## genericcase cardinality 0:1 1:1
#propGet($propName $rangeType "#propVar($prop)")
#end
#else
## case cardinality 0:n 1:n
#propList($propName $rangeType "#propVar($prop)")
#end
#end
#end

}
