#parse('common.vm')##
$license()
package ${PackageBase};

import org.universAAL.middleware.rdf.Resource;
import org.universAAL.middleware.rdf.ResourceFactory;
import ${ $package($ontology)}.*;

//This class is needed for serialization. You usually only need one per main ontology class
public class $ontFactory($ontology) implements ResourceFactory {

	// This is the only method that you have to code, and it should always look
	// like this
	public Resource createInstance(String classURI, String instanceURI, int factoryIndex) {
		switch (factoryIndex) {
	#foreach( $axiom in ${ontology.getAxioms()})
	#if(${axiom.isOfType(AxiomType.DECLARATION)} && ${axiom.getEntity().isOWLClass()})##
		OntClassInfoSetup oci_${ $className($axiom.getEntity())} = createNewOntClassInfo(
		${ $className ($axiom.getEntity())}.MY_URI, factory, $foreach.index ) ;
		case ${foreach.index}:
			return new ${ $className($axiom.getEntity())}(instanceURI);
	#end
	#end
		}
		return null;
	}

}
